<?xml version="1.0" encoding="UTF-8"?>
<!-- Application context definition for PetClinic on Hibernate. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
			
	<context:property-placeholder location="classpath:application.properties"/>
	
	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.**.dao" />
	
	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
			p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
			p:username="${jdbc.username}" p:password="${jdbc.password}"
			p:defaultAutoCommit="false"/>
	
	<!-- JdbcTemplate配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- Hibernate配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<property name="packagesToScan" value="com.**.domain" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="save-update">
					<list>
						<bean class="org.hibernate.event.def.DefaultSaveOrUpdateEventListener" />
					</list>
				</entry>
			</map>
		</property>
	</bean>

	<!-- 事务管理器配置, Hibernate单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<!-- 对所有继承Service类的公用方法实施事务增强 -->
	<!-- 显式使用CGLib动态代理 -->
	<aop:config proxy-target-class="true">
		<!-- 所有继承于BaseService类的子孙类的public方法都进行事务增强-->
	    <aop:pointcut id="servicePointcut" expression="execution(* com.*.service.*Service.*(..))"/>
	    <aop:advisor pointcut-ref="servicePointcut" advice-ref="serviceAdvice" order="0"/>
	</aop:config>
	
	<tx:advice id="serviceAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
	        <tx:method name="save*" read-only="false"/>
	        <tx:method name="delete*" read-only="false"/>
	        <tx:method name="get*" read-only="true"/>
	        <tx:method name="find*" read-only="true"/>
	    </tx:attributes>
	</tx:advice>
	
	<bean id="hibernateDao" class="com.sourceframework.dao.SourceHibernateDao">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="jdbcDao" class="com.sourceframework.dao.SourceJdbcDao">
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
	</bean>
	
	<bean id="dialect" class="com.sourceframework.ibatis.dialect.MySqlDialect"/>
	
	<bean id="limitSqlExecutor" class="com.sourceframework.ibatis.ext.LimitSqlExecutor">
		<property name="dialect" ref="dialect"/>
	</bean>
	
	<!-- SqlMap setup for iBATIS Database Layer -->
	<bean id="sqlMapClient" class="com.sourceframework.ibatis.ext.SqlMapClientDecoratorFactoryBean">
		<property name="configLocation" value="classpath:sql-map-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
		<property name="sqlExecutor" ref="limitSqlExecutor"/>
	</bean>
	
	<bean id="ibatisDao" class="com.sourceframework.dao.SourceIBatisDao"/>
	
	<bean id="service" class="com.sourceframework.service.SourceServiceSupport"/>
	
</beans>